{"version":3,"sources":["component/shared/Nav.js","component/Welcome.js","component/dashboard/RecordTable.js","actions/projectActions.js","actions/types.js","component/dashboard/dashboard.js","component/shared/NotFound.js","component/dashboard/dashboardOperations/CustomerRecord.js","reducers/errorReducer.js","reducers/RecordReducer.js","reducers/rootReducer.js","Store.js","component/dashboard/dashboardOperations/UpdateRecord.js","component/transactions/TransactionItems.js","component/transactions/Transaction.js","component/transactions/transactionOperations/AddTransaction.js","component/transactions/transactionOperations/EditTransactions.js","App.js","serviceWorker.js","index.js"],"names":["Nav","className","to","type","data-toggle","data-target","id","href","Component","Welcome","RecordTable","deleteBtnClick","window","confirm","props","deleteRecord","record","nextProps","errors","this","setState","billCode","name","phoneNumber","address","bill","date","To","onClick","connect","dispath","a","axios","delete","then","res","payload","Dashboard","state","Count","getRecords","records","count","length","RecordsComponent","map","key","aria-haspopup","aria-expanded","get","data","NotFound","CustomerRecords","handleChange","changeHandler","event","fieldName","target","value","submitHandler","newRecord","AddRecord","history","preventDefault","Date","onSubmit","onChange","classnames","placeholder","selected","post","push","alert","catch","err","response","initialState","transactions","transaction","combineReducers","action","filter","x","middleWare","thunk","store","createStore","rootReducer","compose","applyMiddleware","UpdateRecord","updateRecord","getRecord","match","params","Record","put","TransactionItems","deleteTransaction","transactionDate","description","class","amount","Transaction","Balance","Expense","getTransactions","income","expense","i","Bal","TransactionComponent","scope","AddTransaction","checkbox","checked","handleSubmit","newTransaction","createTransaction","newTrans","EditTransactions","updateTransaction","wallet","getTransaction","min","htmlFor","updatedTransaction","App","path","component","exact","CustomerRecord","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.20756b99.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport {Link} from 'react-router-dom' \r\n\r\nclass Nav extends Component {\r\n    render() {\r\n        return (\r\n            <nav className=\"navbar navbar-dark bg-dark navbar-expand-md navbar-light bg-light \" >\r\n                <div className=\"container\">\r\n                    <Link className=\"navbar-brand\" to=\"/\">\r\n                        Cable Manager\r\n            </Link>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#mobile-nav\">\r\n                        <span className=\"navbar-toggler-icon\" />\r\n                    </button>\r\n\r\n                    <div className=\"collapse navbar-collapse\" id=\"mobile-nav\">\r\n                        <ul className=\"navbar-nav mr-auto\">\r\n                            <li className=\"nav-item\">\r\n                                <Link className=\"nav-link\" to=\"/dashboard\">\r\n                                    Home\r\n                        </Link>\r\n                            </li>\r\n                        </ul>\r\n\r\n                        <ul className=\"navbar-nav ml-auto\">\r\n                            <li className=\"nav-item\">\r\n                                <a className=\"nav-link \" href=\"register.html\">\r\n                                    Sign Up\r\n                        </a>\r\n                            </li>\r\n                            <li className=\"nav-item\">\r\n                                <a className=\"nav-link\" href=\"login.html\">\r\n                                    Login\r\n                        </a>\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Nav\r\n","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nclass Welcome extends Component {\r\n  render() {\r\n    return (\r\n      \r\n    <div className=\"landing\" >\r\n    <div className=\"light-overlay landing-inner text-dark\">\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-12 text-center\">\r\n                    <h1 className=\"display-3 mb-4 text-white\">Cable Area Manager</h1>\r\n                    <p className=\"lead text-white\">\r\n                        Create your account to manage your Customer Record\r\n                    </p>\r\n                    <hr />\r\n                    <Link to=\"/dashboard\" className=\"btn btn-lg btn-primary mr-2\">\r\n                        Manager Add Records\r\n                    </Link>\r\n                    <Link to=\"/transaction\" className=\"btn btn-lg btn-info mr-2\">\r\n                        Journal general entries\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Welcome\r\n","import React, { Component } from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport {connect} from 'react-redux'\r\nimport { deleteRecord } from '../../actions/projectActions'\r\nclass RecordTable extends Component {\r\n\r\n    deleteBtnClick = () => {\r\n\r\n        if (window.confirm(\"Are you sure, you want to delete this record\")) {\r\n            this.props.deleteRecord(this.props.record.id);\r\n        }\r\n\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        if (nextProps.errors) {\r\n            this.setState({ errors: nextProps.errors })\r\n        }\r\n\r\n      \r\n    }\r\n      \r\n            \r\n    render() {\r\n\r\n         const record = this.props.record\r\n            return (\r\n\r\n                <tr>\r\n                <td>{record.billCode}</td>\r\n                <td>{record.name}</td>\r\n                <td>{record.phoneNumber}</td>\r\n                <td>{record.address}</td>\r\n                <td>{record.bill}</td>\r\n                <td>{record.date}</td>\r\n                <td>\r\n                <Link to={`/updateRecord/${record.id}`  }>\r\n                <li className=\"btn btn-success\">\r\n                <i>Update</i>\r\n              </li>\r\n                </Link>\r\n                <Link To=\"/Dashboard\" onClick={()=>this.deleteBtnClick()}>\r\n                <li className=\"btn btn-danger\">\r\n                <i>Delete </i>\r\n              </li>\r\n                </Link>\r\n                \r\n                </td>\r\n             </tr>\r\n\r\n   )\r\n        }\r\n        \r\n    \r\n}\r\n\r\n\r\n\r\nexport default connect(null,{deleteRecord})(RecordTable)\r\n","import axios from 'axios'\r\nimport {GET_ERRORS,GET_TRANSACTION, GET_RECORD, DELETE_RECORD,GET_RECORDS,GET_TRANSACTIONS,DELETE_TRANSACTION} from './types'\r\n\r\n\r\nexport const AddRecord = (newRecord , history) => async dispath => {\r\n\r\n   await axios.post('/customer', newRecord)\r\n    .then((res) =>{\r\n\r\n     \r\n      history.push('/dashboard')\r\n       alert(\"Record successfully add\")\r\n\r\n    }).catch((err) => {\r\n    \r\n     \r\n    dispath({type:GET_ERRORS,payload:err.response.data})\r\n   \r\n    });\r\n\r\n//sync => wait\r\n//async = not wait\r\n}\r\n\r\nexport const updateRecord = (id,Record , history) => async dispath => {\r\n   \r\n   await axios.put(`/customer/${id}`, Record)\r\n    .then((res) =>{\r\n\r\n   \r\n      history.push('/dashboard')\r\n       \r\n\r\n    }).catch((err) => {\r\n    \r\n     \r\n    dispath({type:GET_ERRORS,payload:err.response.data})\r\n   \r\n    });\r\n\r\n//sync => wait\r\n//async = not wait\r\n}\r\n\r\nexport const getRecords = () => async dispath => {\r\n\r\n  await axios.get('/customer')\r\n   .then((res) =>{\r\n\r\n      dispath({type:GET_RECORD,payload:res.data})\r\n  \r\n   });\r\n\r\n//sync => wait\r\n//async = not wait\r\n\r\n}\r\n\r\n\r\nexport const getRecord = (id) => async dispath => {\r\n\r\n   await axios.get(`/customer/${id}`)\r\n    .then((res) =>{\r\n \r\n       dispath({type:GET_RECORDS,payload:res.data})\r\n  \r\n    });\r\n \r\n //sync => wait\r\n //async = not wait\r\n \r\n }\r\nexport const deleteRecord = (id) => async dispath => {\r\n   \r\n   await axios.delete( '/customer/'+id)\r\n    .then((res) =>{\r\n\r\n       dispath({type:DELETE_RECORD,payload:id})\r\n    });\r\n \r\n //sync => wait\r\n //async = not wait\r\n \r\n }\r\n\r\n\r\n //// Transactions\r\n\r\n\r\n \r\nexport const createTransaction= (newTrans , history) => async dispath => {\r\n  \r\n   await axios.post(`/transaction/`, newTrans)\r\n    .then((res) =>{\r\n\r\n    \r\n      history.push(`/transaction`)\r\n       \r\n\r\n    }).catch((err) => {\r\n     \r\n    dispath({type:GET_ERRORS,payload:err.response.data})\r\n   \r\n    });\r\n\r\n//sync => wait\r\n//async = not wait\r\n}\r\n\r\nexport const getTransactions= () => async dispath => {\r\n\r\n   await axios.get(`/transaction`)\r\n    .then((res) =>{\r\n\r\n       dispath({type:GET_TRANSACTIONS,payload:res.data})\r\n    });\r\n \r\n //sync => wait\r\n //async = not wait\r\n \r\n }\r\n\r\n export const getTransaction= (id) => async dispath => {\r\n   \r\n   await axios.get(`/transaction/${id}`)\r\n    .then((res) =>{\r\n\r\n       dispath({type:GET_TRANSACTION,payload:res.data})\r\n    });\r\n \r\n //sync => wait\r\n //async = not wait\r\n \r\n }\r\n \r\nexport const deleteTransaction = (id) => async dispath => {\r\n\r\n\r\n   await axios.delete( `/transaction/${id}`)\r\n    .then((res) =>{\r\n \r\n\r\n       dispath({type:DELETE_TRANSACTION,payload:id})\r\n    });\r\n \r\n //sync => wait\r\n //async = not wait\r\n \r\n }\r\n\r\n\r\n export const updateTransaction = (id,updatedTransaction , history) => async dispath => {\r\n\r\n \r\n   await axios.put(`/transaction/${id}`, updatedTransaction)\r\n    .then((res) =>{\r\n\r\n     \r\n      history.push(`/transaction`)\r\n       \r\n\r\n    }).catch((err) => {\r\n    \r\n    dispath({type:GET_ERRORS,payload:err.response.data})\r\n   \r\n    });\r\n\r\n//sync => wait\r\n//async = not wait\r\n}\r\n\r\n\r\n","export const GET_ERRORS = 'GET_ERRORS';\r\n\r\nexport const GET_RECORD = 'GET_RECORD';\r\nexport const GET_RECORDS = 'GET_RECORDS';\r\nexport const DELETE_RECORD = 'DELETE_RECORD';\r\n\r\n\r\nexport const GET_TRANSACTIONS = 'GET_TRANSACTIONS';\r\nexport const GET_TRANSACTION = 'GET_TRANSACTION';\r\nexport const DELETE_TRANSACTION = 'DELETE_TRANSACTION';","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport { getRecords } from '../../actions/projectActions'\r\nimport { connect } from 'react-redux'\r\nimport RecordTable from './RecordTable'\r\n\r\nexport class Dashboard extends Component {\r\n\r\nconstructor(props) {\r\n  super(props)\r\n\r\n  this.state = {\r\n     Count:''\r\n  }\r\n}\r\n\r\n\r\n    componentDidMount() {\r\n        this.props.getRecords();\r\n    }\r\n\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n\r\n        // alert(nextProps.wallet.id)\r\n\r\n        if (nextProps.records) {\r\n            let count = 0;\r\n           \r\n            count=  nextProps.records.length;\r\n\r\n               \r\n\r\n              \r\n\r\n\r\n            \r\n\r\n          \r\n           \r\n            this.setState({ Count: count })\r\n\r\n           \r\n        }\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    render() {\r\n\r\n\r\n        const records = this.props.records\r\n        const RecordsComponent = records.map(record => (<RecordTable key={record.id} record={record} />))\r\n\r\n\r\n        return (\r\n\r\n\r\n\r\n\r\n            <div className=\"projects\">\r\n              <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-12\">\r\n                            <h1 className=\"display-4 text-center text-white\">Customers Records</h1>\r\n                            <br />\r\n                            <div className=\"btn-group\">\r\n                                <button type=\"button\" className=\"btn btn-info btn-lg dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                                    Add\r\n                        </button>\r\n                                <div className=\"dropdown-menu\">\r\n                                    <Link className=\"dropdown-item\" to=\"/addRecord\">Customer</Link>\r\n                                    <Link className=\"dropdown-item\" to=\"/transaction\">Daily Jounral</Link>\r\n                                </div>\r\n                            </div>\r\n                            <br />\r\n                            <div className=\"card text-center \" >\r\n                                <div className=\"card-header bg-info text-white\">\r\n                                    <h4>Current Customers (Total)</h4>\r\n                                    <h1>Count. {this.state.Count} </h1>\r\n                                </div>\r\n                            </div>\r\n                            <hr />\r\n                            {\r\n                                //<!-- Project Item Component -->\r\n                            }\r\n\r\n\r\n\r\n                            <br />\r\n                    \r\n                            <br />\r\n                            <div className=\"container\">\r\n                            <table className=\"table table-bordered textCs\">\r\n                                <thead className=\"thead-dark\">\r\n                                    <tr>\r\n                                        <th>Bill Code</th>\r\n                                        <th> Name</th>\r\n                                        <th> Phone Number</th>\r\n                                        <th> Address</th>\r\n                                        <th>bill</th>\r\n                                        <th> Date</th>\r\n                                        <th></th>\r\n                                       \r\n                                    </tr>\r\n                                </thead>\r\n                                {RecordsComponent}\r\n\r\n                            </table>\r\n                       \r\n                            </div>\r\n\r\n\r\n                            \r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                    </div>\r\n\r\n\r\n\r\n\r\n\r\n                    {\r\n                        //  <!-- End of Project Item Component --> \r\n                    }\r\n\r\n                </div>\r\n          \r\n\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n\r\n\r\n    records: state.record.records\r\n\r\n});\r\nexport default connect(mapStateToProps, { getRecords })(Dashboard)\r\n","import React, { Component } from 'react'\r\nimport {Link} from 'react-router-dom'\r\nclass NotFound extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-12\">\r\n                        <div className=\"error-template text-white \">\r\n                            <h1>\r\n                                Oops!</h1>\r\n                            <h2>\r\n                                404 Not Found</h2>\r\n                            <div className=\"error-details\">\r\n                                Sorry, an error has occured, Requested page not found!\r\n                        </div>\r\n                            <div className=\"error-actions\">\r\n                                <Link to=\"/\" className=\"btn btn-primary btn-lg\"><span className=\"glyphicon glyphicon-home\"></span>\r\n                                Take Me Home </Link>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NotFound\r\n","import React, { Component } from 'react'\r\nimport DatePicker from \"react-datepicker\";\r\nimport {AddRecord} from '../../../actions/projectActions'\r\nimport {connect} from 'react-redux'\r\nimport classnames from 'classnames'\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nclass CustomerRecords extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            billCode: '',\r\n            name: '',\r\n            phoneNumber: '',\r\n            address: '',\r\n            bill: '',\r\n            date: new Date(),\r\n            errors:''\r\n        }\r\n\r\n\r\n    }\r\n    handleChange = date => {\r\n        this.setState({\r\n          date: date\r\n        });\r\n      };\r\n    componentWillReceiveProps(nextProps) {\r\n        if (nextProps.errors) {\r\n            this.setState({ errors: nextProps.errors })\r\n        }\r\n    }\r\n\r\n    changeHandler = (event, fieldName) => {\r\n        this.setState({\r\n            [fieldName]: event.target.value\r\n        });\r\n    }\r\n\r\n    submitHandler = (event) => {\r\n\r\n      \r\n        const newRecord = {\r\n\r\n            billCode: this.state.billCode,\r\n            name: this.state.name,\r\n            phoneNumber: this.state.phoneNumber,\r\n            address: this.state.address,\r\n            bill: this.state.bill,\r\n            date: this.state.date\r\n        }\r\n        \r\n\r\n        this.props.AddRecord(newRecord,this.props.history)\r\n       \r\n\r\n        event.preventDefault();\r\n\r\n    }\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"project\">\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-8 m-auto\">\r\n                            <h5 className=\"display-4 text-center text-white\">Add Record</h5>\r\n                            <hr />\r\n                            <form onSubmit={(event) => this.submitHandler(event)}>\r\n                                <div className=\"form-group\">\r\n                                    <input type=\"text\" onChange={(event) => this.changeHandler(event, \"billCode\")} className={classnames(\"form-control form-control-lg\",{\"is-invalid\":this.state.errors.billCode})} placeholder=\"Bill code\" />\r\n                                    <p className='text-danger'>{this.state.errors.billCode}</p>\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <input type=\"text\" onChange={(event) => this.changeHandler(event, \"name\")} className={classnames(\"form-control form-control-lg\",{\"is-invalid\":this.state.errors.name})} placeholder=\"Account Name\" />\r\n                                    <p className='text-danger'>{this.state.errors.name}</p>\r\n\r\n                                    </div>\r\n                                <div className=\"form-group\">\r\n                                    <input type=\"text\" onChange={(event) => this.changeHandler(event, \"phoneNumber\")} className=\"form-control form-control-lg\"  placeholder=\"Phone number \" />\r\n\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <textarea onChange={(event) => this.changeHandler(event, \"address\")} className=\"form-control form-control-lg\" placeholder=\"Address\"></textarea>\r\n\r\n                                </div>\r\n\r\n                                <div className=\"form-group\">\r\n                                    <input onChange={(event) => this.changeHandler(event, \"bill\")} className=\"form-control form-control-lg\" placeholder=\"bill\"></input>\r\n\r\n                                </div>\r\n\r\n                                <div className=\"form-group\">\r\n                                    <DatePicker\r\n                                    onChange={this.handleChange}\r\n                                        className=\"form-control form-control-lg\"\r\n                                        selected={this.state.date}\r\n                                      \r\n                                    />\r\n                                </div>\r\n                                <input type=\"submit\" className=\"btn btn-primary btn-block mt-4\" value=\"Add\" />\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n\r\n    errors:state.errors\r\n    \r\n})\r\n\r\nexport default connect(mapStateToProps,{AddRecord})(CustomerRecords)\r\n","import { GET_ERRORS } from '../actions/types'\r\n\r\nconst initialState = {\r\n\r\n\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case GET_ERRORS:\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n}","import { GET_RECORD, DELETE_RECORD,GET_TRANSACTION, GET_RECORDS,GET_TRANSACTIONS,DELETE_TRANSACTION } from '../actions/types'\r\nimport { } from '../actions/types'\r\n\r\nconst initialState = {\r\n\r\n    records: [],\r\n    transactions: [],\r\n    record: '',\r\n    transaction: ''\r\n\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n\r\n        case DELETE_TRANSACTION:\r\n            return { ...state, transactions: state.transactions.filter(x => x.id !== action.payload) }\r\n\r\n        case GET_TRANSACTIONS:\r\n            return { ...state, transactions: action.payload }\r\n        case GET_TRANSACTION:\r\n            return { ...state, transaction: action.payload }\r\n        case GET_RECORDS:\r\n            return { ...state, record: action.payload };\r\n        case GET_RECORD:\r\n            return { ...state, records: action.payload };\r\n        case DELETE_RECORD:\r\n            return { ...state, records: state.records.filter(x => x.id !== action.payload) }\r\n        default:\r\n            return state;\r\n    }\r\n}","import {combineReducers} from 'redux'\r\nimport errorReducer from './errorReducer';\r\nimport recordReducer from './RecordReducer';\r\n\r\nexport default combineReducers ({\r\n\r\n    errors:errorReducer,\r\n    record:recordReducer\r\n});","import { createStore, applyMiddleware, compose } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport rootReducer from './reducers/rootReducer'\r\n\r\nconst initialState = {}\r\nconst middleWare = [thunk]\r\nlet store;\r\n\r\n//if (window.navigator.userAgent.includes(\"Chrome\")) {\r\n   // store = createStore(rootReducer,\r\n  //      initialState,\r\n        //compose(applyMiddleware(...middleWare),\r\n      //      window.__REDUX_DEVTOOLS_EXTENSION__ &&\r\n    //        window.__REDUX_DEVTOOLS_EXTENSION__()\r\n  //      ))\r\n//} else {\r\n    store = createStore(rootReducer,\r\n        initialState,\r\n        compose(applyMiddleware(...middleWare)))\r\n//}\r\n\r\nexport default store;","import React, { Component } from 'react'\r\nimport {getRecord,updateRecord} from '../../../actions/projectActions'\r\nimport {connect} from 'react-redux'\r\nimport classnames from 'classnames'\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nclass UpdateRecord extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            id:'',\r\n            billCode: '',\r\n            name: '',\r\n            phoneNumber: '',\r\n            address: '',\r\n            bill: '',\r\n            date: new Date(),\r\n            errors:''\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.props.getRecord(this.props.match.params.id)\r\n    \r\n    }\r\n\r\n   \r\n    submitHandler = (event) => {\r\n\r\n    \r\n        const updateRecord = {\r\n                id: this.state.id,\r\n                name: this.state.name,\r\n                billCode: this.state.billCode,\r\n                phoneNumber: this.state.phoneNumber,\r\n                address:this.state.address,\r\n                bill: this.state.bill,\r\n                date: this.state.date\r\n        }\r\n\r\n        this.props.updateRecord(this.state.id,updateRecord,this.props.history)\r\n        event.preventDefault();\r\n    }   \r\n\r\n    componentWillReceiveProps(nextProps) {\r\n     \r\n        if (nextProps.errors) {\r\n            this.setState({ errors: nextProps.errors })\r\n        }\r\n\r\n        if (nextProps.record) {\r\n           \r\n            this.setState({\r\n\r\n                id: nextProps.record.id,\r\n                name: nextProps.record.name,\r\n                billCode: nextProps.record.billCode,\r\n                phoneNumber: nextProps.record.phoneNumber,\r\n                address:nextProps.record.address,\r\n                bill: nextProps.record.bill,\r\n                date: nextProps.record.date\r\n               \r\n\r\n            }\r\n\r\n            )\r\n        }\r\n    }\r\n\r\n    changeHandler = (event, fieldName) => {\r\n        this.setState({\r\n            [fieldName]: event.target.value\r\n        });\r\n    }\r\n\r\n  \r\n    render() {\r\n        return (\r\n            <div className=\"project\">\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-8 m-auto\">\r\n                            <h5 className=\"display-4 text-center text-white\">Update Record</h5>\r\n                            <hr />\r\n                            <form onSubmit={(event) => this.submitHandler(event)}>\r\n                                <div className=\"form-group\">\r\n                                    <input type=\"text\" value={this.state.billCode} onChange={(event) => this.changeHandler(event, \"billCode\")} className={classnames(\"form-control form-control-lg\",{\"is-invalid\":this.state.errors.billCode})} placeholder=\"Bill code\" />\r\n                                    <p className='text-danger'>{this.state.errors.billCode}</p>\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <input type=\"text\" value={this.state.name} onChange={(event) => this.changeHandler(event, \"name\")} className={classnames(\"form-control form-control-lg\",{\"is-invalid\":this.state.errors.name})} placeholder=\"Account Name\" />\r\n                                    <p className='text-danger'>{this.state.errors.name}</p>\r\n\r\n                                    </div>\r\n                                <div className=\"form-group\">\r\n                                    <input type=\"text\" value={this.state.phoneNumber} onChange={(event) => this.changeHandler(event, \"phoneNumber\")} className=\"form-control form-control-lg\"  placeholder=\"Phone number \" />\r\n\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <textarea value={this.state.address} onChange={(event) => this.changeHandler(event, \"address\")} className=\"form-control form-control-lg\" placeholder=\"Address\"></textarea>\r\n\r\n                                </div>\r\n\r\n                                <div className=\"form-group\">\r\n                                    <input value={this.state.bill} onChange={(event) => this.changeHandler(event, \"bill\")} className=\"form-control form-control-lg\" placeholder=\"bill\"></input>\r\n\r\n                                </div>\r\n\r\n                                <div className=\"form-group\">\r\n                                    <input \r\n                                    onChange={(event) => this.changeHandler(event, \"date\")}\r\n                                        className=\"form-control form-control-lg\"\r\n                                        value={this.state.date}\r\n                                    />\r\n                                </div>\r\n                                <input type=\"submit\" className=\"btn btn-primary btn-block mt-4\" value=\"Update\" />\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n\r\n    errors:state.errors,\r\n    record:state.record.record\r\n    \r\n})\r\n\r\nexport default connect(mapStateToProps,{updateRecord,getRecord})(UpdateRecord)\r\n","import React, { Component } from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport { deleteTransaction } from './../../actions/projectActions'\r\nimport {connect} from 'react-redux'\r\n\r\n\r\n class TransactionItems extends Component {\r\n\r\n\r\n \r\n  \r\n  deleteBtnClick= () =>\r\n    {\r\n\r\n        if(window.confirm(\"Are you sure, you want to delete this wallet\"))\r\n        {\r\n            this.props.deleteTransaction(this.props.transaction.id);\r\n        }\r\n    \r\n    }\r\n  render() {\r\n\r\n  \r\n  \r\n   let id =this.props.transaction.id;\r\n    const transaction = this.props.transaction\r\n    return (\r\n     \r\n     \r\n        <tr className=\"table-Info\">\r\n        <td>{transaction.transactionDate}</td>\r\n        <td>{transaction.description}</td>\r\n        <td class=\"text-success\" > {transaction.amount}</td>\r\n        <td>{transaction.type}</td>\r\n        <td>\r\n            <Link className=\"btn btn-success\"   to={`/trns/edit/${id}`}><i className=\"fas fa-edit fa-2x\">Edit</i></Link>\r\n            <Link className=\"btn btn-danger \" to={`/transaction`} onClick={()=>this.deleteBtnClick()}><i className=\"fas fa-trash fa-2x\">Delete</i></Link>\r\n        </td>\r\n    </tr>\r\n    \r\n\r\n    )\r\n  }\r\n}\r\n\r\nexport default connect(null,{deleteTransaction})(TransactionItems)\r\n","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { getTransactions } from './../../actions/projectActions'\r\nimport { connect } from 'react-redux'\r\nimport TransactionItems from './TransactionItems';\r\nclass Transaction extends Component {\r\n\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n           \r\n            Balance:'',\r\n         \r\n           Expense:''\r\n        \r\n\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.getTransactions();\r\n      \r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n\r\n        // alert(nextProps.wallet.id)\r\n\r\n      \r\n\r\n\r\n\r\n            let income = 0;\r\n            let expense = 0;\r\n            for (let i = 0; i < nextProps.transactions.length; i++) {\r\n\r\n                if (nextProps.transactions[i].type === \"Debit\") {\r\n                    expense = expense + nextProps.transactions[i].amount\r\n\r\n                } else {\r\n\r\n                    income = income + nextProps.transactions[i].amount\r\n               \r\n                }\r\n\r\n\r\n            }\r\n\r\n            let Bal = 0;\r\n            Bal = income - expense;\r\n          // alert(Bal+ \" \" + income +\" \" +expense)\r\n          this.setState({ Balance: Bal ,\r\n        Expense:expense})\r\n\r\n            \r\n        }\r\n\r\n\r\n\r\n\r\n\r\n    \r\n   \r\n\r\n\r\n    render() {\r\n     \r\n\r\n        const transactions = this.props.transactions\r\n\r\n        const TransactionComponent = transactions.map(transaction =>\r\n            (<TransactionItems key={transaction.id} transaction={transaction}  />))\r\n        return (\r\n            <div className=\"container\">\r\n                <Link to=\"/dashboard\" className=\"btn btn-default btn-lg mb-3 text-white\">\r\n                    Back\r\n        </Link>\r\n                <Link to={`/trns/add`} className=\"btn btn-info btn-lg mb-3\">\r\n                    <i className=\"fas fa-plus-circle \"> Add record</i>\r\n                </Link>\r\n                <br />\r\n                <div className=\"card text-center\">\r\n                    <div className=\"card-header bg-info text-white\">\r\n                        <h4 className=\"text-white\"> Expense : Rs. {this.state.Expense} </h4>\r\n                        <h1 className=\"text-white\"> Income : Rs. {this.state.Balance}</h1>\r\n                    </div>\r\n                </div>\r\n                <hr />\r\n\r\n                <table className=\"table table-bordered textCs\">\r\n                    <thead className=\"thead-dark\">\r\n                        <tr>\r\n                            <th scope=\"col\">Date</th>\r\n                            <th scope=\"col\">Description</th>\r\n                            <th scope=\"col\">Amount</th>\r\n                            <th scope=\"col\">Transaction</th>\r\n                            <th></th>\r\n                        </tr>\r\n                    </thead>\r\n\r\n\r\n                    <tbody>\r\n\r\n\r\n                        {\r\n                            \r\n                            TransactionComponent\r\n                        \r\n                        }\r\n\r\n\r\n                    </tbody>\r\n\r\n\r\n                </table>\r\n\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) => ({\r\n\r\n  \r\n    transactions: state.record.transactions\r\n\r\n\r\n});\r\nexport default connect(mapStateToProps, { getTransactions })(Transaction)\r\n","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { createTransaction } from '../../../actions/projectActions'\r\nimport { connect } from 'react-redux'\r\nclass AddTransaction extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n          \r\n            amount: '',\r\n            description: '',\r\n            type: ''\r\n        \r\n\r\n        }\r\n    }\r\n\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n\r\n        // alert(nextProps.wallet.id)\r\n\r\n       \r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    changeHandler = (event, fieldName, checkbox) => {\r\n        this.setState({\r\n            [fieldName]: checkbox ? event.target.checked : event.target.value\r\n        })\r\n    }\r\n    handleSubmit = (event) => {\r\n\r\n        let newTransaction = {\r\n            amount: this.state.amount,\r\n            description: this.state.description,\r\n            type: this.state.type\r\n        }\r\n\r\n        this.props.createTransaction(newTransaction, this.props.history)\r\n\r\n\r\n        event.preventDefault();\r\n     \r\n    }\r\n        render() {\r\n         \r\n            const { amount, description } = this.state;\r\n            return (\r\n\r\n                <div className=\"add-PBI\">\r\n                    <div className=\"container\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-8 m-auto\">\r\n                                <Link to={`/transactions`} className=\"btn btn-light\">\r\n                                    Back to Home\r\n                    </Link>\r\n                                <h4 className=\"display-4 text-center h1\">Record New Transaction</h4>\r\n                                <p className=\"lead text-center h1\">UBL Account</p>\r\n                                <form onSubmit={this.handleSubmit}>\r\n                                    <div className=\"form-group\">\r\n                                        <input type=\"number\"  value={amount} onChange={event => this.changeHandler(event, \"amount\", false)} className=\"form-control form-control-lg\" placeholder=\"Amount\" />\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <textarea className=\"form-control form-control-lg\" value={description} onChange={event => this.changeHandler(event, \"description\", false)} placeholder=\"Description\"></textarea>\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n\r\n                                    <div className=\"form-group\">\r\n                                    <select className=\"form-control form-control-lg\" onChange={(event) => this.changeHandler(event, \"type\",false)} name=\"type\">\r\n                                        <option >Select...</option>\r\n                                        <option value=\"Credit\">Credit</option>\r\n                                        <option value=\"Debit\">Debit</option>\r\n                                        \r\n                                       \r\n                                    </select>\r\n                                </div>\r\n\r\n\r\n\r\n\r\n                            \r\n                                       \r\n                                   \r\n                                   \r\n                                   \r\n                                   \r\n                                            </div>\r\n\r\n                                    <input type=\"submit\" className=\"btn btn-primary btn-block mt-4\" />\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n  \r\n    export default connect(null, { createTransaction }) (AddTransaction)\r\n","import React, { Component } from 'react'\r\n\r\nimport { Link } from 'react-router-dom'\r\nimport { updateTransaction,getTransaction } from '../../../actions/projectActions'\r\nimport { connect } from 'react-redux'\r\nclass EditTransactions extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            id:'',\r\n            amount: '',\r\n            description: '',\r\n            type: '1',\r\n            transactionDate:'',\r\n            Balance:''\r\n       \r\n        }\r\n    }\r\n\r\n \r\n\r\n    componentWillReceiveProps(nextProps) {\r\n\r\n        if (nextProps.transaction) {\r\n            \r\n            this.setState({\r\n\r\n                id: nextProps.transaction.id,\r\n                amount: nextProps.transaction.amount,\r\n                description: nextProps.transaction.description,\r\n                type: nextProps.transaction.type,\r\n                transactionDate:nextProps.transaction.transactionDate,\r\n                Balance:nextProps.transaction.Balance\r\n\r\n            })\r\n        }\r\n            if(nextProps.wallet)\r\n            {\r\n                this.setState({\r\n\r\n                    name:nextProps.wallet.name\r\n                })\r\n            }\r\n\r\n            \r\n        \r\n    }\r\n\r\n    changeHandler = (event, fieldName) => {\r\n        this.setState({\r\n            [fieldName]: event.target.value\r\n        })\r\n    }\r\n    handleSubmit = (event) => {\r\n\r\n        \r\n        let updateTransaction = {\r\n            id:this.state.id,\r\n            amount: this.state.amount,\r\n            description: this.state.description,\r\n            transactionDate:this.state.transactionDate,\r\n            type: this.state.type,\r\n            Balance:this.state.Balance\r\n        }\r\n\r\n       \r\n        this.props.updateTransaction(this.state.id,updateTransaction, this.props.history)\r\n        event.preventDefault();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.getTransaction(this.props.match.params.id)\r\n        \r\n    }\r\n    render() {\r\n       // let id = this.props.match.params.id;\r\n        const { amount, description,type } = this.state;\r\n      \r\n        return (\r\n\r\n\r\n            <div className=\"add-PBI\">\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-8 m-auto\">\r\n                            <Link to={`/transactions`} className=\"btn btn-light\">\r\n                                Back to Home\r\n            </Link>\r\n                            <h4 className=\"display-4 text-center text-white\">Update Transaction</h4>\r\n                            <p className=\"lead text-center text-white\"> Account</p>\r\n                            <form onSubmit={this.handleSubmit}>\r\n                                <div className=\"form-group\">\r\n                                    <input type=\"number\" min=\"1\" value={amount} onChange={event => this.changeHandler(event, \"amount\")} className=\"form-control form-control-lg\" placeholder=\"Amount\" />\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <textarea className=\"form-control form-control-lg\" value={description} onChange={event => this.changeHandler(event, \"description\")} placeholder=\"Description\"></textarea>\r\n                                </div>\r\n                                <div className=\"form-group radio\">\r\n                                    <label htmlFor=\"exampleFormControlTextarea1 \">Transaction Type : </label>\r\n                                    <div className=\"form-check form-check-inline\">\r\n                                        <input  className=\"form-check-input\" type=\"radio\" id=\"income\" checked={type === 1} onChange={event => this.changeHandler(event, \"type\")} name=\"type\" value=\"1\"  />\r\n                                        <label className=\"form-check-label\" htmlFor=\"income\">Income</label>\r\n                                    </div>\r\n                                    <div className=\"form-check form-check-inline\">\r\n                                        <input className=\"form-check-input\" type=\"radio\" id=\"expense\" checked={type === 2} onChange={event => this.changeHandler(event, \"type\")} name=\"type\" value=\"2\"  />\r\n                                        <label className=\"form-check-label\" htmlFor=\"expense\">Expense</label>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <input type=\"submit\" className=\"btn btn-primary btn-block mt-4\" />\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) => ({\r\n    errors: state.errors,\r\n    transaction: state.record.transaction\r\n\r\n\r\n});\r\nexport default connect(mapStateToProps, {updateTransaction, getTransaction })(EditTransactions)\r\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport {BrowserRouter,Route,Switch} from 'react-router-dom'\nimport Nav from './component/shared/Nav'\nimport Welcome from './component/Welcome'\nimport './App.css';\nimport Dashboard from './component/dashboard/dashboard';\nimport NotFound from './component/shared/NotFound';\nimport CustomerRecord from './component/dashboard/dashboardOperations/CustomerRecord';\nimport { Provider } from 'react-redux';\nimport store from './Store'\nimport UpdateRecord from './component/dashboard/dashboardOperations/UpdateRecord';\nimport Transaction from './component/transactions/Transaction';\nimport AddTransaction from './component/transactions/transactionOperations/AddTransaction';\nimport EditTransactions from './component/transactions/transactionOperations/EditTransactions';\nimport 'react-app-polyfill/stable'\n\nfunction App() {\n  return (\n  \n\n    <Provider store={store}>\n\n    \n    <BrowserRouter>\n    \n    <Route path='/' component={Nav}></Route>\n    <Switch>\n    \n   <Route path='/' exact component={Welcome}></Route>\n\n   <Route path='/dashboard' exact component={Dashboard}></Route>\n   <Route path='/addRecord' exact component={CustomerRecord}></Route>\n   <Route path='/updateRecord/:id' exact component={UpdateRecord}></Route>\n\n   <Route path=\"/transaction\" exact component={Transaction} />\n   <Route path=\"/trns/add\" exact component={AddTransaction}/>\n   <Route path=\"/trns/edit/:id\" exact component={EditTransactions}/>\n   <Route path='/' component={NotFound}></Route>\n\n    </Switch>\n    </BrowserRouter>\n\n    \n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}